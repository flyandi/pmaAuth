<?php	/* 		pmaAuth for phpMyAdmin				A simple user management extension for phpMyAdmin that allows to secure phpMyAdmin independent from MySQL users. 			This program is protected by copyright laws and international treaties.		Unauthorized reproduction or distribution of this program, or any 		portion thereof, may result in serious civil and criminal penalties.				This software is released under the GPLv3 License. (http://www.gnu.org/licenses/gpl.txt)			@git		https://github.com/flyandi/pmaAuth		@author		Andreas Gulley (http://github.com/flyandi)		@package 	pmaAuth		@module		CLI Manager		@version	1.0	*/		# (Constants)	define("PMA_USERS", dirname(__FILE__)."\\secure\\users");			# (pmaConVar)	function pmaConVar($index, $default = false) {		global $argv;		return isset($argv[$index+1]) ? $argv[$index+1] : $default;	}		# (pmaConDetails) 	function pmaConDetails($r, $index = 1) {		$result = array();		foreach($r as $field) {			if($d = pmaConVar($index)) {				$result[$field] = $d;			} else {				return false;			}			$index++;		}		return (object)$result;	}		# (pmaSave) 	function pmaSave($f, $j) {		file_put_contents($f, json_encode($j));		return true;	}		# (pmaConOut) Console Output	function pmaConOut() {		$a = func_get_args();		echo vsprintf($a[0], array_slice($a, 1))."\n";		flush();	}		# (pmaConAction) 	function pmaConAction($fields, $action, $enod, $esuccess, $efailed) {		if($details = pmaConDetails($fields)) {			$msg = $action($details) ? $esuccess : $efailed;			foreach((array)$details as $k=>$v) $msg = str_replace(sprintf("{%s}", $k), $v, $msg);			pmaConOut($msg);		} else {			pmaConOut($enod);		}	}		# (presets)	$users = json_decode(file_get_contents(PMA_USERS), true);	if(!is_array($users)) $users = array();		# (logic)	switch(strtolower(pmaConVar(0))) {		// clean		case "clean":			pmaConAction(array("type"), function($details) {				return false;							}, "Clean: pma clean [sessions]", "Ok: All {type} cleaned", "Failed: {type} doesn't exists");			break;					// (add) adds a user		case "add":			pmaConAction(array("username", "password", "group"), function($details) use ($users) {				$uname = sha1($details->username);				if(isset($users[$uname])) return false;				$users[sha1($details->username)] = array(sha1($details->password), $details->group);				return pmaSave(PMA_USERS, $users);			}, "Add user: pma add <username> <password> <group>","Ok: User {username} added", "Error: User {username} already exists");			break;					// (passwd) changes a users password		case "passwd":			pmaConAction(array("username", "password"), function($details) use ($users) {				$uname = sha1($details->username);				if(!isset($users[$uname])) return false;				$users[sha1($details->username)][0] = sha1($details->password);				return pmaSave(PMA_USERS, $users);			}, "Add user: pma passwd <username> <password>","Ok: Password changed for {username}", "Error: User {username} doesn't exists");			break;					// (group) changes a users group		case "group":			pmaConAction(array("username", "group"), function($details) use ($users) {				$uname = sha1($details->username);				if(!isset($users[$uname])) return false;				$users[sha1($details->username)][1] = $details->group;				return pmaSave(PMA_USERS, $users);			}, "Add user: pma group <username> <group>","Ok: Group changed for {username}", "Error: User {username} doesn't exists");			break;								// (revoke) removes a user		case "revoke":			pmaConAction(array("username"), function($details) use ($users) {				$uname = sha1($details->username);				if(!isset($users[$uname])) return false;				unset($users[$uname]);				return pmaSave(PMA_USERS, $users);			}, "Revoke user: pma revoke <username>", "Ok: User {username} revoked", "Error: User {username} doesn't exist");			break;					// (test) checks a user is present		case "test":			pmaConAction(array("username"), function($details) use ($users) {				$uname = sha1($details->username);				return isset($users[$uname]);			}, "Test user: pma test <username>", "Ok: User {username} exists", "Error: User {username} doesn't exist");			break;							// (default)		default:			pmaConOut("pmaAuth CLI Tool\nCall: pma [action] [options]\nActions: clean|add|test|passwd|group|revoke");			break;	}	